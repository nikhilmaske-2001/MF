{"version":3,"sources":["styles.tsx","colors/chartColors.tsx","components/styles.tsx","components/SideGraph.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["useStyles","makeStyles","theme","Container","display","justifyContent","paddingTop","root","minWidth","minHeight","Box","marginBottom","Button","marginTop","Total","piechart","maxHeight","maxWidth","margin","marginLeft","graph_button","color","upButtons","width","chartColors","graph","summery","SideGraph","investedData","compondedData","classes","invested_graph","componded_graph","period","length","data","year","obj","toString","push","console","log","Card","className","LineChart","height","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","initialState","monthly_investment","return","initialStateLump","investment","App","useState","formData","setFormData","formDataLump","setFormDataLump","totalAmount","setTotalAmount","investedAmount","setInvestedAmount","chartData","setChartData","setinvestedData","setcompoundedData","investedDataLump","setinvestedDataLump","compoundedDataLump","setcompoundedDataLump","openChart","setOpenChart","page","setPage","variant","onClick","CardContent","FormControl","InputLabel","htmlFor","Input","id","onChange","e","target","value","fullWidth","expected_return","investment_amount","total","expected_graph","month","one_year_return","Math","round","wealthGain","maintainAspectRatio","responsive","labels","datasets","backgroundColor","hoverBackgroundColor","initialInvestment","options","legend","position","elements","arc","borderWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEaA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CAC1CC,UAAW,CACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,IAEhBC,KAAM,CACFC,SAAU,IACVC,UAAW,KAEfC,IAAK,CACDN,QAAS,OACTO,aAAc,IAElBC,OAAQ,CACJC,UAAW,IAEfC,MAAO,CACHD,UAAW,IAEfE,SAAU,CACNC,UAAW,IACXC,SAAU,IACVC,OAAQ,GACRC,WAAY,IAEhBC,aAAc,CACVC,MAAO,OACPH,OAAQ,EACRC,WAAY,KAEhBG,UAAW,CACPC,MAAO,OACPJ,WAAY,Q,SCnCPK,EAAc,CACvB,UACA,W,6DCASxB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CAC1CuB,MAAO,CACHZ,UAAW,KAEfa,QAAS,CACLtB,QAAS,OACTC,eAAgB,SAChBkB,MAAO,IACPJ,WAAY,IACZN,UAAW,IAEfN,KAAM,CACFgB,MAAO,Y,OC2CAI,MAnDf,YAA0D,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,cACzBC,EAAU9B,IACV+B,EAAiBH,EACjBI,EAAkBH,EAClBI,EAASJ,EAAcK,OACvBC,EAAO,CAAC,IAEd,GAAIF,EACA,IAAK,IAAIG,EAAO,EAAGA,GAAQH,EAAQG,IAAQ,CACvC,IAAIC,EAAM,CACN,MAAS,KAAOD,GAAME,WACtB,SAAYP,EAAeK,GAC3B,UAAaJ,EAAgBI,GAC7B,IAAOA,GAEXD,EAAKI,KAAKF,QAGd,IAAKD,EAAO,EAAGA,GAAQH,EAAQG,IAC3BC,EAAM,CACF,MAAS,KAAOD,GAAME,WACtB,SAAY,EACZ,UAAaN,EAAgBI,GAC7B,IAAOA,GAEXD,EAAKI,KAAKF,GAKlB,OAFAG,QAAQC,IAAIN,GAGR,eAACO,EAAA,EAAD,WACI,qBAAKC,UAAWb,EAAQL,MAAxB,SACI,eAACmB,EAAA,EAAD,CAAWrB,MAAO,IAAKsB,OAAQ,IAAKV,KAAMA,EACtCjB,OAAQ,CAAE4B,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GADnD,UAEI,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,WAAWM,OAAO,YAChD,cAACF,EAAA,EAAD,CAAMC,KAAK,WAAWL,QAAQ,YAAYM,OAAO,iBAGzD,cAACjB,EAAA,EAAD,CAAMC,UAAWb,EAAQJ,cC3C/BkC,EAAe,CACnBC,mBAAoB,GACpB5B,OAAQ,GACR6B,OAAQ,IAGJC,EAAmB,CACvBC,WAAY,GACZ/B,OAAQ,GACR6B,OAAQ,IAyMKG,MAtMf,WACE,IAAMnC,EAAU9B,IAEhB,EAAgCkE,mBAASN,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAwCF,mBAASH,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAsCJ,mBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA4CN,mBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KACA,EAAkCR,mBAAS,IAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAwCV,mBAAS,IAAjD,mBAAOtC,EAAP,KAAqBiD,EAArB,KACA,EAA2CX,mBAAS,IAApD,mBAAOrC,EAAP,KAAsBiD,EAAtB,KACA,EAAgDZ,mBAAS,IAAzD,mBAAOa,EAAP,KAAyBC,EAAzB,KACA,EAAoDd,mBAAS,IAA7D,mBAAOe,EAAP,KAA2BC,EAA3B,KACA,GAAkChB,oBAAS,GAA3C,qBAAOiB,GAAP,MAAkBC,GAAlB,MACA,GAAwBlB,mBAAS,GAAjC,qBAAOmB,GAAP,MAAaC,GAAb,MAoHA,OACE,sBAAK3C,UAAWb,EAAQ3B,UAAxB,UACE,eAACuC,EAAA,EAAD,CAAMC,UAAWb,EAAQvB,KAAMgF,QAAQ,WAAvC,UACE,sBAAK5C,UAAWb,EAAQR,UAAxB,UACE,cAACV,EAAA,EAAD,CAAQ4E,QA9DA,WACdF,GAAQ,GACRlB,EAAYR,GACZU,EAAgBP,GAChBa,EAAa,IACbJ,EAAe,GACfE,EAAkB,GAClBG,EAAgB,IAChBC,EAAkB,IAClBE,EAAoB,IACpBE,EAAsB,KAoDhB,iBACA,cAACtE,EAAA,EAAD,CAAQ4E,QAlDC,WACfF,GAAQ,GACRlB,EAAYR,GACZU,EAAgBP,GAChBa,EAAa,IACbJ,EAAe,GACfE,EAAkB,GAClBG,EAAgB,IAChBC,EAAkB,IAClBE,EAAoB,IACpBE,EAAsB,KAwChB,wBAEDG,GACC,eAACI,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAa/C,UAAWb,EAAQpB,IAAhC,UACE,cAACiF,EAAA,EAAD,CAAYC,QAAQ,WAApB,4CACA,cAACC,EAAA,EAAD,CAAOC,GAAG,WAAW,mBAAiB,iBAAiBC,SAAU,SAACC,GAAD,OAAO5B,EAAY,2BAAKD,GAAN,IAAgBN,mBAAoBmC,EAAEC,OAAOC,UAAUA,MAAO/B,EAASN,wBAG5J,eAAC6B,EAAA,EAAD,CAAa/C,UAAWb,EAAQpB,IAAhC,UACE,cAACiF,EAAA,EAAD,CAAYC,QAAQ,WAApB,uCACA,cAACC,EAAA,EAAD,CAAOC,GAAG,WAAW,mBAAiB,iBAAiBC,SAAU,SAACC,GAAD,OAAO5B,EAAY,2BAAKD,GAAN,IAAgBlC,OAAQ+D,EAAEC,OAAOC,UAAUA,MAAO/B,EAASlC,YAGhJ,eAACyD,EAAA,EAAD,CAAa/C,UAAWb,EAAQpB,IAAhC,UACE,cAACiF,EAAA,EAAD,CAAYC,QAAQ,WAApB,iCACA,cAACC,EAAA,EAAD,CAAOC,GAAG,WAAW,mBAAiB,iBAAiBC,SAAU,SAACC,GAAD,OAAO5B,EAAY,2BAAKD,GAAN,IAAgBL,OAAQkC,EAAEC,OAAOC,UAAUA,MAAO/B,EAASL,YAGhJ,cAAClD,EAAA,EAAD,CAAQ+B,UAAWb,EAAQlB,OAAQ2E,QAAQ,WAAWlE,MAAM,UAAU8E,WAAS,EAC7EX,QA3IW,WASrB,IARA,IAAI3B,GAA8BM,EAASN,mBACvC5B,GAAkBkC,EAASlC,OAC3BmE,GAA2BjC,EAASL,OACpCuC,EAA4B,EAC5BC,EAAgB,EAChBvE,EAAiB,GACjBwE,EAAiB,GAEZnE,EAAO,EAAGA,GAAQH,EAAQG,IAAQ,CACzC,IAAK,IAAIoE,EAAQ,EAAGA,GAAS,GAAIA,IAC/BF,GAAgBzC,EAChBwC,GAAwCxC,EAE1C,IAAI4C,EAAkBC,KAAKC,MAAOL,EAAQ,IAAOF,GACjDE,EAAQI,KAAKC,MAAML,EAAQG,GAC3B1E,EAAeQ,KAAK8D,GACpBE,EAAehE,KAAK+D,GAEtBD,EAAoBK,KAAKC,MAAMN,GAE/B,IAAIO,GADJN,EAAQI,KAAKC,MAAML,IACMD,EACzB3B,EAAkB2B,GAClB7B,EAAe8B,GACf1B,EAAa,CACXiC,qBAAqB,EACrBC,YAAY,EACZC,OAAQ,CAAC,kBAAmB,eAC5BC,SAAU,CACR,CACE7E,KAAM,CAACkE,EAAmBO,GAC1BK,gBAAiBzF,EACjB0F,qBAAsB1F,MAI5BqD,EAAgB9C,GAChB+C,EAAkByB,IAqGV,yBAEA,eAAC7F,EAAA,EAAD,CAAKiC,UAAWb,EAAQhB,MAAxB,2BAAyCyD,EAAzC,IAAsD,uBAAtD,2BACsBE,QAGxB,eAACgB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAa/C,UAAWb,EAAQpB,IAAhC,UACE,cAACiF,EAAA,EAAD,CAAYC,QAAQ,WAApB,oCACA,cAACC,EAAA,EAAD,CAAOC,GAAG,WAAW,mBAAiB,iBAAiBC,SAAU,SAACC,GAAD,OAAO1B,EAAgB,2BAAKD,GAAN,IAAoBL,WAAYgC,EAAEC,OAAOC,UAAUA,MAAO7B,EAAaL,gBAGhK,eAAC0B,EAAA,EAAD,CAAa/C,UAAWb,EAAQpB,IAAhC,UACE,cAACiF,EAAA,EAAD,CAAYC,QAAQ,WAApB,uCACA,cAACC,EAAA,EAAD,CAAOC,GAAG,WAAW,mBAAiB,iBAAiBC,SAAU,SAACC,GAAD,OAAO1B,EAAgB,2BAAKD,GAAN,IAAoBpC,OAAQ+D,EAAEC,OAAOC,UAAUA,MAAO7B,EAAapC,YAG5J,eAACyD,EAAA,EAAD,CAAa/C,UAAWb,EAAQpB,IAAhC,UACE,cAACiF,EAAA,EAAD,CAAYC,QAAQ,WAApB,iCACA,cAACC,EAAA,EAAD,CAAOC,GAAG,WAAW,mBAAiB,iBAAiBC,SAAU,SAACC,GAAD,OAAO1B,EAAgB,2BAAKD,GAAN,IAAoBP,OAAQkC,EAAEC,OAAOC,UAAUA,MAAO7B,EAAaP,YAG5J,cAAClD,EAAA,EAAD,CAAQ+B,UAAWb,EAAQlB,OAAQ2E,QAAQ,WAAWlE,MAAM,UAAU8E,WAAS,EAC7EX,QA9Ee,WACzB,IAAIxB,GAAsBK,EAAaL,WACnC/B,GAAkBoC,EAAapC,OAC/BmE,GAA2B/B,EAAaP,OACxCyC,EAAiB,GACjBY,GAA6B9C,EAAaL,WAC9CuC,EAAehE,KAAKyB,GAEpB,IAAK,IAAI5B,EAAO,EAAGA,GAAQH,EAAQG,IACjC4B,GAA0B0C,KAAKC,MAAO3C,EAAa,IAAOoC,GAC1DG,EAAehE,KAAKyB,GAGtBxB,QAAQC,IAAI8D,GACZ,IAAIK,EAAc5C,EAAcmD,EAChCzC,EAAkByC,GAClB3C,EAAeR,GACfY,EAAa,CACXiC,qBAAqB,EACrBC,YAAY,EACZC,OAAQ,CAAC,kBAAmB,eAC5BC,SAAU,CACR,CACE7E,KAAM,CAACgF,EAAmBP,GAC1BK,gBAAiBzF,EACjB0F,qBAAsB1F,MAI5B0D,EAAsBqB,IAgDd,yBAEA,eAAC7F,EAAA,EAAD,CAAKiC,UAAWb,EAAQhB,MAAxB,2BAAyCyD,EAAzC,IAAsD,uBAAtD,2BACsBE,QAI1B,cAAC7D,EAAA,EAAD,CAAQ+B,UAAWb,EAAQV,aAAcoE,QA/H5B,WACjBJ,IAAcD,KA8HV,SAA+DA,GAAS,8BACxE,cAAC,IAAD,CAAUxC,UAAWb,EAAQf,SAAUoB,KAAMwC,EAAWyC,QA5H9C,CACdC,OAAQ,CACNjH,SAAS,EACTkH,SAAU,SAEZC,SAAU,CACRC,IAAK,CACHC,YAAa,UAwHbpC,GACEF,IACA,cAAC,EAAD,CAAWvD,aAAcA,EACvBC,cAAeA,IAEjBsD,IACA,cAAC,EAAD,CAAWvD,aAAcmD,EAAkBlD,cAAeoD,QCvMrDyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.09bc07fc.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles(theme => ({\n    Container: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        paddingTop: 30,\n    },\n    root: {\n        minWidth: 350,\n        minHeight: 550,\n    },\n    Box: {\n        display: \"flex\",\n        marginBottom: 20,\n    },\n    Button: {\n        marginTop: 20,\n    },\n    Total: {\n        marginTop: 40,\n    },\n    piechart: {\n        maxHeight: 200,\n        maxWidth: 200,\n        margin: 20,\n        marginLeft: 70\n    },\n    graph_button: {\n        color: \"blue\",\n        margin: 5,\n        marginLeft: 100,\n    },\n    upButtons: {\n        width: \"100%\",\n        marginLeft: 70,\n    }\n}));","export const chartColors = [\n    \"#e34522\",\n    \"#14b514\"\n];","import { makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles(theme => ({\n    graph: {\n        marginTop: 100,\n    },\n    summery: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        width: 300,\n        marginLeft: 200,\n        marginTop: 10,\n    },\n    root: {\n        width: '100%',\n    },\n}));","import React from 'react';\nimport { Card } from '@material-ui/core';\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\nimport { useStyles } from './styles';\n\n\nfunction SideGraph({ investedData, compondedData }: any) {\n    const classes = useStyles();\n    const invested_graph = investedData;\n    const componded_graph = compondedData;\n    const period = compondedData.length;\n    const data = [{}];\n\n    if (period) {\n        for (var year = 1; year <= period; year++) {\n            var obj = {\n                \"name\": (2021 + year).toString(),\n                \"invested\": invested_graph[year],\n                \"componded\": componded_graph[year],\n                \"amt\": year,\n            };\n            data.push(obj);\n        };\n    } else {\n        for (year = 1; year <= period; year++) {\n            obj = {\n                \"name\": (2021 + year).toString(),\n                \"invested\": 0,\n                \"componded\": componded_graph[year],\n                \"amt\": year,\n            };\n            data.push(obj);\n        }\n    }\n    console.log(data);\n\n    return (\n        <Card >\n            <div className={classes.graph}>\n                <LineChart width={730} height={450} data={data}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"invested\" stroke=\"#8884d8\" />\n                    <Line type=\"monotone\" dataKey=\"componded\" stroke=\"#82ca9d\" />\n                </LineChart>\n            </div>\n            <Card className={classes.summery}>\n\n            </Card>\n        </Card>\n    )\n}\n\nexport default SideGraph;\n","import React, { useState } from 'react';\nimport { FormControl, InputLabel, Input, Card, CardContent, Box, Button } from '@material-ui/core';\nimport { useStyles } from \"./styles\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { chartColors } from './colors/chartColors';\nimport SideGraph from './components/SideGraph';\n\nconst initialState = {\n  monthly_investment: \"\",\n  period: \"\",\n  return: \"\",\n}\n\nconst initialStateLump = {\n  investment: \"\",\n  period: \"\",\n  return: \"\",\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  const [formData, setFormData] = useState(initialState);\n  const [formDataLump, setFormDataLump] = useState(initialStateLump);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [investedAmount, setInvestedAmount] = useState(0);\n  const [chartData, setChartData] = useState({});\n  const [investedData, setinvestedData] = useState({});\n  const [compondedData, setcompoundedData] = useState({});\n  const [investedDataLump, setinvestedDataLump] = useState({});\n  const [compoundedDataLump, setcompoundedDataLump] = useState({});\n  const [openChart, setOpenChart] = useState(false);\n  const [page, setPage] = useState(1);\n\n  const calculateTotal = () => {\n    var monthly_investment: number = +formData.monthly_investment;\n    var period: number = +formData.period;\n    var expected_return: number = +formData.return;\n    var investment_amount: number = 0;\n    var total: number = 0;\n    var invested_graph = [];\n    var expected_graph = [];\n\n    for (var year = 1; year <= period; year++) {\n      for (var month = 1; month <= 12; month++) {\n        total = total + monthly_investment;\n        investment_amount = investment_amount + monthly_investment;\n      }\n      var one_year_return = Math.round((total / 100) * expected_return);\n      total = Math.round(total + one_year_return);\n      invested_graph.push(investment_amount);\n      expected_graph.push(total);\n    }\n    investment_amount = Math.round(investment_amount);\n    total = Math.round(total);\n    var wealthGain = total - investment_amount;\n    setInvestedAmount(investment_amount);\n    setTotalAmount(total);\n    setChartData({\n      maintainAspectRatio: false,\n      responsive: false,\n      labels: [\"Amount Invested\", \"Wealth Gain\"],\n      datasets: [\n        {\n          data: [investment_amount, wealthGain],\n          backgroundColor: chartColors,\n          hoverBackgroundColor: chartColors\n        }\n      ]\n    });\n    setinvestedData(invested_graph);\n    setcompoundedData(expected_graph);\n  };\n\n  const open_chart = () => {\n    setOpenChart(!openChart);\n  }\n\n  const options = {\n    legend: {\n      display: false,\n      position: \"right\"\n    },\n    elements: {\n      arc: {\n        borderWidth: 0\n      }\n    }\n  };\n\n  const openSIP = () => {\n    setPage(1);\n    setFormData(initialState);\n    setFormDataLump(initialStateLump);\n    setChartData({});\n    setTotalAmount(0);\n    setInvestedAmount(0);\n    setinvestedData({});\n    setcompoundedData({});\n    setinvestedDataLump({});\n    setcompoundedDataLump({});\n  }\n\n  const openLump = () => {\n    setPage(0);\n    setFormData(initialState);\n    setFormDataLump(initialStateLump);\n    setChartData({});\n    setTotalAmount(0);\n    setInvestedAmount(0);\n    setinvestedData({});\n    setcompoundedData({});\n    setinvestedDataLump({});\n    setcompoundedDataLump({});\n  }\n\n  // Lump\n  const calculateTotalLump = () => {\n    var investment: number = +formDataLump.investment;\n    var period: number = +formDataLump.period;\n    var expected_return: number = +formDataLump.return;\n    var expected_graph = [];\n    var initialInvestment: number = +formDataLump.investment;\n    expected_graph.push(investment);\n\n    for (var year = 1; year <= period; year++) {\n      investment = investment + Math.round((investment / 100) * expected_return);\n      expected_graph.push(investment);\n    }\n\n    console.log(expected_graph);\n    var wealthGain = (investment) - initialInvestment;\n    setInvestedAmount(initialInvestment);\n    setTotalAmount(investment);\n    setChartData({\n      maintainAspectRatio: false,\n      responsive: false,\n      labels: [\"Amount Invested\", \"Wealth Gain\"],\n      datasets: [\n        {\n          data: [initialInvestment, wealthGain],\n          backgroundColor: chartColors,\n          hoverBackgroundColor: chartColors\n        }\n      ]\n    });\n    setcompoundedDataLump(expected_graph);\n  }\n  return (\n    <div className={classes.Container}>\n      <Card className={classes.root} variant=\"outlined\">\n        <div className={classes.upButtons}>\n          <Button onClick={openSIP}>SIP</Button>\n          <Button onClick={openLump}>LumpSum</Button>\n        </div>\n        {page ?\n          <CardContent>\n            <FormControl className={classes.Box}>\n              <InputLabel htmlFor=\"my-input\">Monthly Investment Amount (Rs)</InputLabel>\n              <Input id=\"my-input\" aria-describedby=\"my-helper-text\" onChange={(e) => setFormData({ ...formData, monthly_investment: e.target.value })} value={formData.monthly_investment} />\n            </FormControl>\n\n            <FormControl className={classes.Box}>\n              <InputLabel htmlFor=\"my-input\">Investment Period (years)</InputLabel>\n              <Input id=\"my-input\" aria-describedby=\"my-helper-text\" onChange={(e) => setFormData({ ...formData, period: e.target.value })} value={formData.period} />\n            </FormControl>\n\n            <FormControl className={classes.Box}>\n              <InputLabel htmlFor=\"my-input\">Expected Return (%)</InputLabel>\n              <Input id=\"my-input\" aria-describedby=\"my-helper-text\" onChange={(e) => setFormData({ ...formData, return: e.target.value })} value={formData.return} />\n            </FormControl>\n\n            <Button className={classes.Button} variant=\"outlined\" color=\"primary\" fullWidth\n              onClick={calculateTotal}> Calculate </Button>\n            <Box className={classes.Total}>Total: ₹ {totalAmount} <br />\n              Invested Amount: ₹ {investedAmount}</Box>\n          </CardContent> :\n          // LUMP SUM\n          <CardContent>\n            <FormControl className={classes.Box}>\n              <InputLabel htmlFor=\"my-input\">Investment Amount (Rs)</InputLabel>\n              <Input id=\"my-input\" aria-describedby=\"my-helper-text\" onChange={(e) => setFormDataLump({ ...formDataLump, investment: e.target.value })} value={formDataLump.investment} />\n            </FormControl>\n\n            <FormControl className={classes.Box}>\n              <InputLabel htmlFor=\"my-input\">Investment Period (years)</InputLabel>\n              <Input id=\"my-input\" aria-describedby=\"my-helper-text\" onChange={(e) => setFormDataLump({ ...formDataLump, period: e.target.value })} value={formDataLump.period} />\n            </FormControl>\n\n            <FormControl className={classes.Box}>\n              <InputLabel htmlFor=\"my-input\">Expected Return (%)</InputLabel>\n              <Input id=\"my-input\" aria-describedby=\"my-helper-text\" onChange={(e) => setFormDataLump({ ...formDataLump, return: e.target.value })} value={formDataLump.return} />\n            </FormControl>\n\n            <Button className={classes.Button} variant=\"outlined\" color=\"primary\" fullWidth\n              onClick={calculateTotalLump}> Calculate </Button>\n            <Box className={classes.Total}>Total: ₹ {totalAmount} <br />\n              Invested Amount: ₹ {investedAmount}</Box>\n          </CardContent>\n        }\n\n        <Button className={classes.graph_button} onClick={open_chart}>{openChart ? `HideChart` : `Show in Chart`}</Button>\n        <Doughnut className={classes.piechart} data={chartData} options={options} />\n      </Card>\n      {\n        page ?\n          openChart &&\n          <SideGraph investedData={investedData}\n            compondedData={compondedData} />\n          :\n          openChart &&\n          <SideGraph investedData={investedDataLump} compondedData={compoundedDataLump} />\n      }\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}